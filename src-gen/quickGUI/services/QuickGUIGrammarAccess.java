/*
 * generated by Xtext 2.17.0
 */
package quickGUI.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class QuickGUIGrammarAccess extends AbstractGrammarElementFinder {
	
	public class GUIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quickGUI.QuickGUI.GUI");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTitleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTitleSTRINGTerminalRuleCall_0_0 = (RuleCall)cTitleAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLayoutAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLayoutLayoutParserRuleCall_1_1_0 = (RuleCall)cLayoutAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//GUI:
		//	title=STRING? ('(' layout=Layout ')');
		@Override public ParserRule getRule() { return rule; }
		
		//title=STRING? ('(' layout=Layout ')')
		public Group getGroup() { return cGroup; }
		
		//title=STRING?
		public Assignment getTitleAssignment_0() { return cTitleAssignment_0; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_0_0() { return cTitleSTRINGTerminalRuleCall_0_0; }
		
		//'(' layout=Layout ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//layout=Layout
		public Assignment getLayoutAssignment_1_1() { return cLayoutAssignment_1_1; }
		
		//Layout
		public RuleCall getLayoutLayoutParserRuleCall_1_1_0() { return cLayoutLayoutParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class LayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quickGUI.QuickGUI.Layout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cHorizontalParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cVerticalParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Layout:
		//	(Horizontal | Vertical) '(' elements+=Element* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//(Horizontal | Vertical) '(' elements+=Element* ')'
		public Group getGroup() { return cGroup; }
		
		//Horizontal | Vertical
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//Horizontal
		public RuleCall getHorizontalParserRuleCall_0_0() { return cHorizontalParserRuleCall_0_0; }
		
		//Vertical
		public RuleCall getVerticalParserRuleCall_0_1() { return cVerticalParserRuleCall_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//elements+=Element*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_2_0() { return cElementsElementParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class HorizontalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quickGUI.QuickGUI.Horizontal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHorizontalAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cHKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cHorizontalKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//Horizontal:
		//	{Horizontal} ("h" | "horizontal");
		@Override public ParserRule getRule() { return rule; }
		
		//{Horizontal} ("h" | "horizontal")
		public Group getGroup() { return cGroup; }
		
		//{Horizontal}
		public Action getHorizontalAction_0() { return cHorizontalAction_0; }
		
		//"h" | "horizontal"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"h"
		public Keyword getHKeyword_1_0() { return cHKeyword_1_0; }
		
		//"horizontal"
		public Keyword getHorizontalKeyword_1_1() { return cHorizontalKeyword_1_1; }
	}
	public class VerticalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quickGUI.QuickGUI.Vertical");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVerticalAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cVKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cVerticalKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//Vertical:
		//	{Vertical} ("v" | "vertical");
		@Override public ParserRule getRule() { return rule; }
		
		//{Vertical} ("v" | "vertical")
		public Group getGroup() { return cGroup; }
		
		//{Vertical}
		public Action getVerticalAction_0() { return cVerticalAction_0; }
		
		//"v" | "vertical"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"v"
		public Keyword getVKeyword_1_0() { return cVKeyword_1_0; }
		
		//"vertical"
		public Keyword getVerticalKeyword_1_1() { return cVerticalKeyword_1_1; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quickGUI.QuickGUI.Element");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeButtonParserRuleCall_0_0 = (RuleCall)cTypeAlternatives_0.eContents().get(0);
		private final RuleCall cTypeTextBoxParserRuleCall_0_1 = (RuleCall)cTypeAlternatives_0.eContents().get(1);
		private final RuleCall cTypeInputBoxParserRuleCall_0_2 = (RuleCall)cTypeAlternatives_0.eContents().get(2);
		
		//Element:
		//	type=(Button | TextBox | InputBox);
		@Override public ParserRule getRule() { return rule; }
		
		//type=(Button | TextBox | InputBox)
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//(Button | TextBox | InputBox)
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//Button
		public RuleCall getTypeButtonParserRuleCall_0_0() { return cTypeButtonParserRuleCall_0_0; }
		
		//TextBox
		public RuleCall getTypeTextBoxParserRuleCall_0_1() { return cTypeTextBoxParserRuleCall_0_1; }
		
		//InputBox
		public RuleCall getTypeInputBoxParserRuleCall_0_2() { return cTypeInputBoxParserRuleCall_0_2; }
	}
	public class ButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quickGUI.QuickGUI.Button");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cButtonAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cBtnKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cButtonKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Button Element:
		//	{Button} ("btn" | "button") name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{Button} ("btn" | "button") name=STRING
		public Group getGroup() { return cGroup; }
		
		//{Button}
		public Action getButtonAction_0() { return cButtonAction_0; }
		
		//"btn" | "button"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"btn"
		public Keyword getBtnKeyword_1_0() { return cBtnKeyword_1_0; }
		
		//"button"
		public Keyword getButtonKeyword_1_1() { return cButtonKeyword_1_1; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
	}
	public class TextBoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quickGUI.QuickGUI.TextBox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTextBoxAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cTbKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cTextboxKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//TextBox Element:
		//	{TextBox} ("tb" | "textbox") name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{TextBox} ("tb" | "textbox") name=STRING
		public Group getGroup() { return cGroup; }
		
		//{TextBox}
		public Action getTextBoxAction_0() { return cTextBoxAction_0; }
		
		//"tb" | "textbox"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"tb"
		public Keyword getTbKeyword_1_0() { return cTbKeyword_1_0; }
		
		//"textbox"
		public Keyword getTextboxKeyword_1_1() { return cTextboxKeyword_1_1; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
	}
	public class InputBoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quickGUI.QuickGUI.InputBox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputBoxAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cIbKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cInputBoxKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cRequireCheckAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cRequireCheckAlternatives_3_0 = (Alternatives)cRequireCheckAssignment_3.eContents().get(0);
		private final Keyword cRequireCheckTrueKeyword_3_0_0 = (Keyword)cRequireCheckAlternatives_3_0.eContents().get(0);
		private final Keyword cRequireCheckFalseKeyword_3_0_1 = (Keyword)cRequireCheckAlternatives_3_0.eContents().get(1);
		
		//InputBox Element:
		//	{InputBox} ("ib" | "inputBox") name=STRING
		//	requireCheck=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//{InputBox} ("ib" | "inputBox") name=STRING requireCheck=('true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//{InputBox}
		public Action getInputBoxAction_0() { return cInputBoxAction_0; }
		
		//"ib" | "inputBox"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"ib"
		public Keyword getIbKeyword_1_0() { return cIbKeyword_1_0; }
		
		//"inputBox"
		public Keyword getInputBoxKeyword_1_1() { return cInputBoxKeyword_1_1; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//requireCheck=('true' | 'false')
		public Assignment getRequireCheckAssignment_3() { return cRequireCheckAssignment_3; }
		
		//('true' | 'false')
		public Alternatives getRequireCheckAlternatives_3_0() { return cRequireCheckAlternatives_3_0; }
		
		//'true'
		public Keyword getRequireCheckTrueKeyword_3_0_0() { return cRequireCheckTrueKeyword_3_0_0; }
		
		//'false'
		public Keyword getRequireCheckFalseKeyword_3_0_1() { return cRequireCheckFalseKeyword_3_0_1; }
	}
	
	
	private final GUIElements pGUI;
	private final LayoutElements pLayout;
	private final HorizontalElements pHorizontal;
	private final VerticalElements pVertical;
	private final ElementElements pElement;
	private final ButtonElements pButton;
	private final TextBoxElements pTextBox;
	private final InputBoxElements pInputBox;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public QuickGUIGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGUI = new GUIElements();
		this.pLayout = new LayoutElements();
		this.pHorizontal = new HorizontalElements();
		this.pVertical = new VerticalElements();
		this.pElement = new ElementElements();
		this.pButton = new ButtonElements();
		this.pTextBox = new TextBoxElements();
		this.pInputBox = new InputBoxElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("quickGUI.QuickGUI".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//GUI:
	//	title=STRING? ('(' layout=Layout ')');
	public GUIElements getGUIAccess() {
		return pGUI;
	}
	
	public ParserRule getGUIRule() {
		return getGUIAccess().getRule();
	}
	
	//Layout:
	//	(Horizontal | Vertical) '(' elements+=Element* ')';
	public LayoutElements getLayoutAccess() {
		return pLayout;
	}
	
	public ParserRule getLayoutRule() {
		return getLayoutAccess().getRule();
	}
	
	//Horizontal:
	//	{Horizontal} ("h" | "horizontal");
	public HorizontalElements getHorizontalAccess() {
		return pHorizontal;
	}
	
	public ParserRule getHorizontalRule() {
		return getHorizontalAccess().getRule();
	}
	
	//Vertical:
	//	{Vertical} ("v" | "vertical");
	public VerticalElements getVerticalAccess() {
		return pVertical;
	}
	
	public ParserRule getVerticalRule() {
		return getVerticalAccess().getRule();
	}
	
	//Element:
	//	type=(Button | TextBox | InputBox);
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Button Element:
	//	{Button} ("btn" | "button") name=STRING;
	public ButtonElements getButtonAccess() {
		return pButton;
	}
	
	public ParserRule getButtonRule() {
		return getButtonAccess().getRule();
	}
	
	//TextBox Element:
	//	{TextBox} ("tb" | "textbox") name=STRING;
	public TextBoxElements getTextBoxAccess() {
		return pTextBox;
	}
	
	public ParserRule getTextBoxRule() {
		return getTextBoxAccess().getRule();
	}
	
	//InputBox Element:
	//	{InputBox} ("ib" | "inputBox") name=STRING
	//	requireCheck=('true' | 'false');
	public InputBoxElements getInputBoxAccess() {
		return pInputBox;
	}
	
	public ParserRule getInputBoxRule() {
		return getInputBoxAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
